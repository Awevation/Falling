<html>
    <head>
      <title>Falling</title>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
      <link rel="stylesheet" href="style/style.css" type="text/css">
      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
      <script src="js/jquery.hotkeys.js" type="text/javascript"></script>
      <script src="js/keyStatus.js" type="text/javascript"></script>
      <script src="js/sylvester.js" type="text/javascript"></script>
      <script src="js/glUtils.js" type="text/javascript"></script>

      <script src="js/Timer.js" type="text/javascript"></script>
      <script src="js/Quad.js" type="text/javascript"></script>
      <script src="js/Cloud.js" type="text/javascript"></script>
      <script src="js/Sky.js" type="text/javascript"></script>
      <script src="js/Player.js" type="text/javascript"></script>

      <script src="js/main.js" type="text/javascript"></script>

      <script id="shader-vs" type="x-shader/x-vertex">
	  attribute vec3 aVertexPosition;
	  attribute vec2 aTexCo;

	  uniform mat4 uMVMatrix;
	  uniform mat4 uPMatrix;

	  varying highp vec2 vTexCo;

	  void main(void) {
	      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	      vTexCo = aTexCo;
	  }
      </script>

      <script id="shader-fs" type="x-shader/x-fragment">
	  precision mediump float;

	  varying highp vec2 vTexCo;

	  uniform sampler2D uSampler;

	  void main(void) {
	      gl_FragColor = texture2D(uSampler, vec2(vTexCo.st));
	      if(gl_FragColor.a < 0.1) {
		  discard;
	      }
	  }
      </script>

      <script id="blur-shader" type="x-shader/x-fragment">
	  precision mediump float;

	  uniform float sigma; //higher = more blue

	  uniform float blurSize; //should be == 1.0f / texturePixelWidth for horiz, guess what for vert!

	  uniform sampler2D blurSampler; //texture to be blurred

	  const float pi = 3.14159265f; //self explanatory

	  //'Mutually exclusive macros for for various separable blurs of varying kernel size' this tutorial says. OK. I'm sure I'll understand someday.
	  #if defined(VERTICAL_BLUR_9)
	  const float numBlurPixelsPerSide = 4.0f;
	  const vec2  blurMultiplyVec      = vec2(0.0f, 1.0f);
	  #elif defined(HORIZONTAL_BLUR_9)
	  const float numBlurPixelsPerSide = 4.0f;
	  const vec2  blurMultiplyVec      = vec2(1.0f, 0.0f);
	  #elif defined(VERTICAL_BLUR_7)
	  const float numBlurPixelsPerSide = 3.0f;
	  const vec2  blurMultiplyVec      = vec2(0.0f, 1.0f);
	  #elif defined(HORIZONTAL_BLUR_7)
	  const float numBlurPixelsPerSide = 3.0f;
	  const vec2  blurMultiplyVec      = vec2(1.0f, 0.0f);
	  #elif defined(VERTICAL_BLUR_5)
	  const float numBlurPixelsPerSide = 2.0f;
	  const vec2  blurMultiplyVec      = vec2(0.0f, 1.0f);
	  #elif defined(HORIZONTAL_BLUR_5)
	  const float numBlurPixelsPerSide = 2.0f;
	  const vec2  blurMultiplyVec      = vec2(1.0f, 0.0f);
	  #else
	  // This only exists to get this shader to compile when no macros are defined
	  const float numBlurPixelsPerSide = 0.0f;
	  const vec2  blurMultiplyVec      = vec2(0.0f, 0.0f);
	  #endif

	  void main() {
	      //Incremental Gaussian Coeefficiant Calculation (check out GPU Gems 2 pp. 877 - 889)
	      vec3 incrementalGaussian;
	      incrementalGaussian.x = 1.0f / (sqrt(2.0d * pi) * sigma);
	      incrementalGaussian.y = exp(-0.5f / (sigma * sigma));
	      incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;

	      vec4 avgValue = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	      float coefficientSum = 0.0f;

	      //Take the cntral sample first....
	      avgValue += texture2D(blurSampler, gl_TexCoord[0].xy) * incrementalGaussian.x;
	      coefficientSum += incrementalGaussian.x;
	      incrementalGaussian.xy *= incrementalGaussian.yz;

	      //Go through remaining 8 vertical samples (4 on each side of center)
	      for (float i 1.0f; i <= numBlurPixelPerSide; i++) {
		  avgValue += texture2D(blurSampler, gl_texCoord[0].xy - i * blurSize * blurMultiplyVec) * incrementalGaussian.x;
		  avgValue += texture2D(blurSampler, gl_texCoord[0].xy + i * blurSize * blurMultiplyVec) * incrementalGaussian.x;
		  coefficientSum += 2 * incrementalGaussian.x;
		  incrementalGaussian.xy *= incrementalGaussian.yz;
	      }

	      gl_FragColor = avgValue / coefficientSum;
	  }
      </script>

    </head>
    
    <body>
	<div id="canvainer">
	    <canvas id="canvas" width="400" height="600">
		Your browser doesn't appear to support the HTML5 <code>&lt;canvas&gt;</code> element. You truly are missing out. I'm so, so sorry.
		Please, http://www.mozilla.org/ or https://www.google.com/chrome/. I wish you all the best.
	    </canvas>
	</div>
    </body>	
</html>
